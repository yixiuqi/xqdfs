// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ThriftCmdStruct struct {
	ImgA     []byte `thrift:"imgA,1" json:"imgA"`
	ImgB     []byte `thrift:"imgB,2" json:"imgB"`
	FeatureA []byte `thrift:"featureA,3" json:"featureA"`
	FeatureB []byte `thrift:"featureB,4" json:"featureB"`
	Param    string `thrift:"param,5" json:"param"`
}

func NewThriftCmdStruct() *ThriftCmdStruct {
	return &ThriftCmdStruct{}
}

func (p *ThriftCmdStruct) GetImgA() []byte {
	return p.ImgA
}

func (p *ThriftCmdStruct) GetImgB() []byte {
	return p.ImgB
}

func (p *ThriftCmdStruct) GetFeatureA() []byte {
	return p.FeatureA
}

func (p *ThriftCmdStruct) GetFeatureB() []byte {
	return p.FeatureB
}

func (p *ThriftCmdStruct) GetParam() string {
	return p.Param
}
func (p *ThriftCmdStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ThriftCmdStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ImgA = v
	}
	return nil
}

func (p *ThriftCmdStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ImgB = v
	}
	return nil
}

func (p *ThriftCmdStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FeatureA = v
	}
	return nil
}

func (p *ThriftCmdStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.FeatureB = v
	}
	return nil
}

func (p *ThriftCmdStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Param = v
	}
	return nil
}

func (p *ThriftCmdStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ThriftCmdStruct"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ThriftCmdStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("imgA", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:imgA: %s", p, err)
	}
	if err := oprot.WriteBinary(p.ImgA); err != nil {
		return fmt.Errorf("%T.imgA (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:imgA: %s", p, err)
	}
	return err
}

func (p *ThriftCmdStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("imgB", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:imgB: %s", p, err)
	}
	if err := oprot.WriteBinary(p.ImgB); err != nil {
		return fmt.Errorf("%T.imgB (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:imgB: %s", p, err)
	}
	return err
}

func (p *ThriftCmdStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("featureA", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:featureA: %s", p, err)
	}
	if err := oprot.WriteBinary(p.FeatureA); err != nil {
		return fmt.Errorf("%T.featureA (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:featureA: %s", p, err)
	}
	return err
}

func (p *ThriftCmdStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("featureB", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:featureB: %s", p, err)
	}
	if err := oprot.WriteBinary(p.FeatureB); err != nil {
		return fmt.Errorf("%T.featureB (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:featureB: %s", p, err)
	}
	return err
}

func (p *ThriftCmdStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("param", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:param: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Param)); err != nil {
		return fmt.Errorf("%T.param (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:param: %s", p, err)
	}
	return err
}

func (p *ThriftCmdStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftCmdStruct(%+v)", *p)
}

type ThriftResultStrcut struct {
	Result_ int32  `thrift:"result,1" json:"result"`
	Info    string `thrift:"info,2" json:"info"`
	Data    string `thrift:"data,3" json:"data"`
	Ext     []byte `thrift:"ext,4" json:"ext"`
}

func NewThriftResultStrcut() *ThriftResultStrcut {
	return &ThriftResultStrcut{}
}

func (p *ThriftResultStrcut) GetResult_() int32 {
	return p.Result_
}

func (p *ThriftResultStrcut) GetInfo() string {
	return p.Info
}

func (p *ThriftResultStrcut) GetData() string {
	return p.Data
}

func (p *ThriftResultStrcut) GetExt() []byte {
	return p.Ext
}
func (p *ThriftResultStrcut) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ThriftResultStrcut) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Result_ = v
	}
	return nil
}

func (p *ThriftResultStrcut) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Info = v
	}
	return nil
}

func (p *ThriftResultStrcut) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *ThriftResultStrcut) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Ext = v
	}
	return nil
}

func (p *ThriftResultStrcut) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ThriftResultStrcut"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ThriftResultStrcut) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:result: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Result_)); err != nil {
		return fmt.Errorf("%T.result (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:result: %s", p, err)
	}
	return err
}

func (p *ThriftResultStrcut) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("info", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:info: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Info)); err != nil {
		return fmt.Errorf("%T.info (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:info: %s", p, err)
	}
	return err
}

func (p *ThriftResultStrcut) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:data: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Data)); err != nil {
		return fmt.Errorf("%T.data (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:data: %s", p, err)
	}
	return err
}

func (p *ThriftResultStrcut) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ext", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ext: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Ext); err != nil {
		return fmt.Errorf("%T.ext (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ext: %s", p, err)
	}
	return err
}

func (p *ThriftResultStrcut) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ThriftResultStrcut(%+v)", *p)
}
